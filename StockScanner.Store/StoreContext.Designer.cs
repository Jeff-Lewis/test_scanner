//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_Condition_FilterIndicator", "FilterIndicator", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.FilterIndicator), "Condition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.Condition), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_Stock_Exchange", "Exchange", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(StockScanner.Store.Exchange), "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.Stock), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_FilterIndicator_Filter", "Filter", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.Filter), "FilterIndicator", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.FilterIndicator), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_FilterIndicator_Indicator", "Indicator", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.Indicator), "FilterIndicator", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.FilterIndicator), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_IndicatorParamValue_FilterIndicator", "FilterIndicator", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.FilterIndicator), "IndicatorParamValue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.IndicatorParamValue), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_HistData_Stock", "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.Stock), "HistData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.HistData), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_IndicatorParam_Indicator", "Indicator", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.Indicator), "IndicatorParam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.IndicatorParam), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_IndicatorParamValue_IndicatorParam", "IndicatorParam", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StockScanner.Store.IndicatorParam), "IndicatorParamValue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.IndicatorParamValue), true)]
[assembly: EdmRelationshipAttribute("StockMonitorModel", "FK_Stock_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(StockScanner.Store.Industry), "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StockScanner.Store.Stock), true)]

#endregion

namespace StockScanner.Store
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class StoreContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new StockMonitorEntities object using the connection string found in the 'StockMonitorEntities' section of the application configuration file.
        /// </summary>
        public StoreContext() : base("name=StockMonitorEntities", "StockMonitorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new StockMonitorEntities object.
        /// </summary>
        public StoreContext(string connectionString) : base(connectionString, "StockMonitorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new StockMonitorEntities object.
        /// </summary>
        public StoreContext(EntityConnection connection) : base(connection, "StockMonitorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompareType> CompareTypes
        {
            get
            {
                if ((_CompareTypes == null))
                {
                    _CompareTypes = base.CreateObjectSet<CompareType>("CompareTypes");
                }
                return _CompareTypes;
            }
        }
        private ObjectSet<CompareType> _CompareTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Condition> Conditions
        {
            get
            {
                if ((_Conditions == null))
                {
                    _Conditions = base.CreateObjectSet<Condition>("Conditions");
                }
                return _Conditions;
            }
        }
        private ObjectSet<Condition> _Conditions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Exchange> Exchanges
        {
            get
            {
                if ((_Exchanges == null))
                {
                    _Exchanges = base.CreateObjectSet<Exchange>("Exchanges");
                }
                return _Exchanges;
            }
        }
        private ObjectSet<Exchange> _Exchanges;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Filter> Filters
        {
            get
            {
                if ((_Filters == null))
                {
                    _Filters = base.CreateObjectSet<Filter>("Filters");
                }
                return _Filters;
            }
        }
        private ObjectSet<Filter> _Filters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FilterIndicator> FilterIndicators
        {
            get
            {
                if ((_FilterIndicators == null))
                {
                    _FilterIndicators = base.CreateObjectSet<FilterIndicator>("FilterIndicators");
                }
                return _FilterIndicators;
            }
        }
        private ObjectSet<FilterIndicator> _FilterIndicators;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HistData> HistDatas
        {
            get
            {
                if ((_HistDatas == null))
                {
                    _HistDatas = base.CreateObjectSet<HistData>("HistDatas");
                }
                return _HistDatas;
            }
        }
        private ObjectSet<HistData> _HistDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Indicator> Indicators
        {
            get
            {
                if ((_Indicators == null))
                {
                    _Indicators = base.CreateObjectSet<Indicator>("Indicators");
                }
                return _Indicators;
            }
        }
        private ObjectSet<Indicator> _Indicators;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IndicatorParam> IndicatorParams
        {
            get
            {
                if ((_IndicatorParams == null))
                {
                    _IndicatorParams = base.CreateObjectSet<IndicatorParam>("IndicatorParams");
                }
                return _IndicatorParams;
            }
        }
        private ObjectSet<IndicatorParam> _IndicatorParams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IndicatorParamValue> IndicatorParamValues
        {
            get
            {
                if ((_IndicatorParamValues == null))
                {
                    _IndicatorParamValues = base.CreateObjectSet<IndicatorParamValue>("IndicatorParamValues");
                }
                return _IndicatorParamValues;
            }
        }
        private ObjectSet<IndicatorParamValue> _IndicatorParamValues;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Industry> Industries
        {
            get
            {
                if ((_Industries == null))
                {
                    _Industries = base.CreateObjectSet<Industry>("Industries");
                }
                return _Industries;
            }
        }
        private ObjectSet<Industry> _Industries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sector> Sectors
        {
            get
            {
                if ((_Sectors == null))
                {
                    _Sectors = base.CreateObjectSet<Sector>("Sectors");
                }
                return _Sectors;
            }
        }
        private ObjectSet<Sector> _Sectors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Stock> Stocks
        {
            get
            {
                if ((_Stocks == null))
                {
                    _Stocks = base.CreateObjectSet<Stock>("Stocks");
                }
                return _Stocks;
            }
        }
        private ObjectSet<Stock> _Stocks;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompareTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompareTypes(CompareType compareType)
        {
            base.AddObject("CompareTypes", compareType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Conditions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToConditions(Condition condition)
        {
            base.AddObject("Conditions", condition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Exchanges EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchanges(Exchange exchange)
        {
            base.AddObject("Exchanges", exchange);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Filters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilters(Filter filter)
        {
            base.AddObject("Filters", filter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FilterIndicators EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilterIndicators(FilterIndicator filterIndicator)
        {
            base.AddObject("FilterIndicators", filterIndicator);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HistDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHistDatas(HistData histData)
        {
            base.AddObject("HistDatas", histData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Indicators EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndicators(Indicator indicator)
        {
            base.AddObject("Indicators", indicator);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IndicatorParams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndicatorParams(IndicatorParam indicatorParam)
        {
            base.AddObject("IndicatorParams", indicatorParam);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IndicatorParamValues EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndicatorParamValues(IndicatorParamValue indicatorParamValue)
        {
            base.AddObject("IndicatorParamValues", indicatorParamValue);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Industries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustries(Industry industry)
        {
            base.AddObject("Industries", industry);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sectors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSectors(Sector sector)
        {
            base.AddObject("Sectors", sector);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Stocks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStocks(Stock stock)
        {
            base.AddObject("Stocks", stock);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="filterId">No Metadata Documentation available.</param>
        /// <param name="o_MaxPeriod">No Metadata Documentation available.</param>
        public int spFilter_GetMaxPeriod(Nullable<global::System.Int32> filterId, ObjectParameter o_MaxPeriod)
        {
            ObjectParameter filterIdParameter;
            if (filterId.HasValue)
            {
                filterIdParameter = new ObjectParameter("FilterId", filterId);
            }
            else
            {
                filterIdParameter = new ObjectParameter("FilterId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("spFilter_GetMaxPeriod", filterIdParameter, o_MaxPeriod);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="stockId">No Metadata Documentation available.</param>
        /// <param name="periodId">No Metadata Documentation available.</param>
        /// <param name="lastSyncDate">No Metadata Documentation available.</param>
        public int spHistData_GetLastSyncDate(Nullable<global::System.Int32> stockId, Nullable<global::System.Int32> periodId, ObjectParameter lastSyncDate)
        {
            ObjectParameter stockIdParameter;
            if (stockId.HasValue)
            {
                stockIdParameter = new ObjectParameter("StockId", stockId);
            }
            else
            {
                stockIdParameter = new ObjectParameter("StockId", typeof(global::System.Int32));
            }
    
            ObjectParameter periodIdParameter;
            if (periodId.HasValue)
            {
                periodIdParameter = new ObjectParameter("PeriodId", periodId);
            }
            else
            {
                periodIdParameter = new ObjectParameter("PeriodId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("spHistData_GetLastSyncDate", stockIdParameter, periodIdParameter, lastSyncDate);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="CompareType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompareType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompareType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static CompareType CreateCompareType(global::System.Int32 id, global::System.String name)
        {
            CompareType compareType = new CompareType();
            compareType.Id = id;
            compareType.Name = name;
            return compareType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Condition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Condition : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Condition object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="compareTypeId">Initial value of the CompareTypeId property.</param>
        /// <param name="compareToValue">Initial value of the CompareToValue property.</param>
        /// <param name="filterIndicatorId">Initial value of the FilterIndicatorId property.</param>
        /// <param name="withCalcValue">Initial value of the WithCalcValue property.</param>
        public static Condition CreateCondition(global::System.Int32 id, global::System.String name, global::System.Int32 compareTypeId, global::System.Double compareToValue, global::System.Int32 filterIndicatorId, global::System.Boolean withCalcValue)
        {
            Condition condition = new Condition();
            condition.Id = id;
            condition.Name = name;
            condition.CompareTypeId = compareTypeId;
            condition.CompareToValue = compareToValue;
            condition.FilterIndicatorId = filterIndicatorId;
            condition.WithCalcValue = withCalcValue;
            return condition;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CompareTypeId
        {
            get
            {
                return _CompareTypeId;
            }
            set
            {
                OnCompareTypeIdChanging(value);
                ReportPropertyChanging("CompareTypeId");
                _CompareTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompareTypeId");
                OnCompareTypeIdChanged();
            }
        }
        private global::System.Int32 _CompareTypeId;
        partial void OnCompareTypeIdChanging(global::System.Int32 value);
        partial void OnCompareTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CompareToValue
        {
            get
            {
                return _CompareToValue;
            }
            set
            {
                OnCompareToValueChanging(value);
                ReportPropertyChanging("CompareToValue");
                _CompareToValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompareToValue");
                OnCompareToValueChanged();
            }
        }
        private global::System.Double _CompareToValue;
        partial void OnCompareToValueChanging(global::System.Double value);
        partial void OnCompareToValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilterIndicatorId
        {
            get
            {
                return _FilterIndicatorId;
            }
            set
            {
                OnFilterIndicatorIdChanging(value);
                ReportPropertyChanging("FilterIndicatorId");
                _FilterIndicatorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilterIndicatorId");
                OnFilterIndicatorIdChanged();
            }
        }
        private global::System.Int32 _FilterIndicatorId;
        partial void OnFilterIndicatorIdChanging(global::System.Int32 value);
        partial void OnFilterIndicatorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean WithCalcValue
        {
            get
            {
                return _WithCalcValue;
            }
            set
            {
                OnWithCalcValueChanging(value);
                ReportPropertyChanging("WithCalcValue");
                _WithCalcValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WithCalcValue");
                OnWithCalcValueChanged();
            }
        }
        private global::System.Boolean _WithCalcValue;
        partial void OnWithCalcValueChanging(global::System.Boolean value);
        partial void OnWithCalcValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_Condition_FilterIndicator", "FilterIndicator")]
        public FilterIndicator FilterIndicator
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilterIndicator>("StockMonitorModel.FK_Condition_FilterIndicator", "FilterIndicator").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilterIndicator>("StockMonitorModel.FK_Condition_FilterIndicator", "FilterIndicator").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FilterIndicator> FilterIndicatorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilterIndicator>("StockMonitorModel.FK_Condition_FilterIndicator", "FilterIndicator");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FilterIndicator>("StockMonitorModel.FK_Condition_FilterIndicator", "FilterIndicator", value);
                }
            }
        }

        #endregion
    }



    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Exchange")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Exchange : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Exchange object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Exchange CreateExchange(global::System.Int32 id, global::System.String name)
        {
            Exchange exchange = new Exchange();
            exchange.Id = id;
            exchange.Name = name;
            return exchange;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_Stock_Exchange", "Stock")]
        public EntityCollection<Stock> Stocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Stock>("StockMonitorModel.FK_Stock_Exchange", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Stock>("StockMonitorModel.FK_Stock_Exchange", "Stock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Filter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Filter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Filter object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Filter CreateFilter(global::System.Int32 id, global::System.String name)
        {
            Filter filter = new Filter();
            filter.Id = id;
            filter.Name = name;
            return filter;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_FilterIndicator_Filter", "FilterIndicator")]
        public EntityCollection<FilterIndicator> FilterIndicators
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FilterIndicator>("StockMonitorModel.FK_FilterIndicator_Filter", "FilterIndicator");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FilterIndicator>("StockMonitorModel.FK_FilterIndicator_Filter", "FilterIndicator", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="FilterIndicator")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FilterIndicator : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FilterIndicator object.
        /// </summary>
        /// <param name="filterId">Initial value of the FilterId property.</param>
        /// <param name="indicatorId">Initial value of the IndicatorId property.</param>
        /// <param name="periodId">Initial value of the PeriodId property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="orderId">Initial value of the OrderId property.</param>
        public static FilterIndicator CreateFilterIndicator(global::System.Int32 filterId, global::System.Int32 indicatorId, global::System.Int32 periodId, global::System.Int32 id, global::System.String name, global::System.Int32 orderId)
        {
            FilterIndicator filterIndicator = new FilterIndicator();
            filterIndicator.FilterId = filterId;
            filterIndicator.IndicatorId = indicatorId;
            filterIndicator.PeriodId = periodId;
            filterIndicator.Id = id;
            filterIndicator.Name = name;
            filterIndicator.OrderId = orderId;
            return filterIndicator;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilterId
        {
            get
            {
                return _FilterId;
            }
            set
            {
                OnFilterIdChanging(value);
                ReportPropertyChanging("FilterId");
                _FilterId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilterId");
                OnFilterIdChanged();
            }
        }
        private global::System.Int32 _FilterId;
        partial void OnFilterIdChanging(global::System.Int32 value);
        partial void OnFilterIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IndicatorId
        {
            get
            {
                return _IndicatorId;
            }
            set
            {
                OnIndicatorIdChanging(value);
                ReportPropertyChanging("IndicatorId");
                _IndicatorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IndicatorId");
                OnIndicatorIdChanged();
            }
        }
        private global::System.Int32 _IndicatorId;
        partial void OnIndicatorIdChanging(global::System.Int32 value);
        partial void OnIndicatorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PeriodId
        {
            get
            {
                return _PeriodId;
            }
            set
            {
                OnPeriodIdChanging(value);
                ReportPropertyChanging("PeriodId");
                _PeriodId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PeriodId");
                OnPeriodIdChanged();
            }
        }
        private global::System.Int32 _PeriodId;
        partial void OnPeriodIdChanging(global::System.Int32 value);
        partial void OnPeriodIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
                OnOrderIdChanging(value);
                ReportPropertyChanging("OrderId");
                _OrderId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrderId");
                OnOrderIdChanged();
            }
        }
        private global::System.Int32 _OrderId;
        partial void OnOrderIdChanging(global::System.Int32 value);
        partial void OnOrderIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_Condition_FilterIndicator", "Condition")]
        public EntityCollection<Condition> Conditions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Condition>("StockMonitorModel.FK_Condition_FilterIndicator", "Condition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Condition>("StockMonitorModel.FK_Condition_FilterIndicator", "Condition", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_FilterIndicator_Filter", "Filter")]
        public Filter Filter
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Filter>("StockMonitorModel.FK_FilterIndicator_Filter", "Filter").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Filter>("StockMonitorModel.FK_FilterIndicator_Filter", "Filter").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Filter> FilterReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Filter>("StockMonitorModel.FK_FilterIndicator_Filter", "Filter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Filter>("StockMonitorModel.FK_FilterIndicator_Filter", "Filter", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_FilterIndicator_Indicator", "Indicator")]
        public Indicator Indicator
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Indicator>("StockMonitorModel.FK_FilterIndicator_Indicator", "Indicator").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Indicator>("StockMonitorModel.FK_FilterIndicator_Indicator", "Indicator").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Indicator> IndicatorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Indicator>("StockMonitorModel.FK_FilterIndicator_Indicator", "Indicator");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Indicator>("StockMonitorModel.FK_FilterIndicator_Indicator", "Indicator", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_IndicatorParamValue_FilterIndicator", "IndicatorParamValue")]
        public EntityCollection<IndicatorParamValue> IndicatorParamValues
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndicatorParamValue>("StockMonitorModel.FK_IndicatorParamValue_FilterIndicator", "IndicatorParamValue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndicatorParamValue>("StockMonitorModel.FK_IndicatorParamValue_FilterIndicator", "IndicatorParamValue", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="HistData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HistData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HistData object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="stockId">Initial value of the StockId property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="openValue">Initial value of the OpenValue property.</param>
        /// <param name="highValue">Initial value of the HighValue property.</param>
        /// <param name="lowValue">Initial value of the LowValue property.</param>
        /// <param name="closeValue">Initial value of the CloseValue property.</param>
        /// <param name="volume">Initial value of the Volume property.</param>
        /// <param name="perionId">Initial value of the PerionId property.</param>
        public static HistData CreateHistData(global::System.Int32 id, global::System.Int32 stockId, global::System.DateTime date, global::System.Double openValue, global::System.Double highValue, global::System.Double lowValue, global::System.Double closeValue, global::System.Int32 volume, global::System.Int32 perionId)
        {
            HistData histData = new HistData();
            histData.Id = id;
            histData.StockId = stockId;
            histData.Date = date;
            histData.OpenValue = openValue;
            histData.HighValue = highValue;
            histData.LowValue = lowValue;
            histData.CloseValue = closeValue;
            histData.Volume = volume;
            histData.PerionId = perionId;
            return histData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StockId
        {
            get
            {
                return _StockId;
            }
            set
            {
                OnStockIdChanging(value);
                ReportPropertyChanging("StockId");
                _StockId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StockId");
                OnStockIdChanged();
            }
        }
        private global::System.Int32 _StockId;
        partial void OnStockIdChanging(global::System.Int32 value);
        partial void OnStockIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double OpenValue
        {
            get
            {
                return _OpenValue;
            }
            set
            {
                OnOpenValueChanging(value);
                ReportPropertyChanging("OpenValue");
                _OpenValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OpenValue");
                OnOpenValueChanged();
            }
        }
        private global::System.Double _OpenValue;
        partial void OnOpenValueChanging(global::System.Double value);
        partial void OnOpenValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double HighValue
        {
            get
            {
                return _HighValue;
            }
            set
            {
                OnHighValueChanging(value);
                ReportPropertyChanging("HighValue");
                _HighValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HighValue");
                OnHighValueChanged();
            }
        }
        private global::System.Double _HighValue;
        partial void OnHighValueChanging(global::System.Double value);
        partial void OnHighValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double LowValue
        {
            get
            {
                return _LowValue;
            }
            set
            {
                OnLowValueChanging(value);
                ReportPropertyChanging("LowValue");
                _LowValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LowValue");
                OnLowValueChanged();
            }
        }
        private global::System.Double _LowValue;
        partial void OnLowValueChanging(global::System.Double value);
        partial void OnLowValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CloseValue
        {
            get
            {
                return _CloseValue;
            }
            set
            {
                OnCloseValueChanging(value);
                ReportPropertyChanging("CloseValue");
                _CloseValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CloseValue");
                OnCloseValueChanged();
            }
        }
        private global::System.Double _CloseValue;
        partial void OnCloseValueChanging(global::System.Double value);
        partial void OnCloseValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Volume
        {
            get
            {
                return _Volume;
            }
            set
            {
                OnVolumeChanging(value);
                ReportPropertyChanging("Volume");
                _Volume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Volume");
                OnVolumeChanged();
            }
        }
        private global::System.Int32 _Volume;
        partial void OnVolumeChanging(global::System.Int32 value);
        partial void OnVolumeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PerionId
        {
            get
            {
                return _PerionId;
            }
            set
            {
                OnPerionIdChanging(value);
                ReportPropertyChanging("PerionId");
                _PerionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PerionId");
                OnPerionIdChanged();
            }
        }
        private global::System.Int32 _PerionId;
        partial void OnPerionIdChanging(global::System.Int32 value);
        partial void OnPerionIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_HistData_Stock", "Stock")]
        public Stock Stock
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("StockMonitorModel.FK_HistData_Stock", "Stock").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("StockMonitorModel.FK_HistData_Stock", "Stock").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Stock> StockReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("StockMonitorModel.FK_HistData_Stock", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Stock>("StockMonitorModel.FK_HistData_Stock", "Stock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Indicator")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Indicator : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Indicator object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Indicator CreateIndicator(global::System.Int32 id, global::System.String name)
        {
            Indicator indicator = new Indicator();
            indicator.Id = id;
            indicator.Name = name;
            return indicator;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_FilterIndicator_Indicator", "FilterIndicator")]
        public EntityCollection<FilterIndicator> FilterIndicators
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FilterIndicator>("StockMonitorModel.FK_FilterIndicator_Indicator", "FilterIndicator");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FilterIndicator>("StockMonitorModel.FK_FilterIndicator_Indicator", "FilterIndicator", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_IndicatorParam_Indicator", "IndicatorParam")]
        public EntityCollection<IndicatorParam> IndicatorParams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndicatorParam>("StockMonitorModel.FK_IndicatorParam_Indicator", "IndicatorParam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndicatorParam>("StockMonitorModel.FK_IndicatorParam_Indicator", "IndicatorParam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="IndicatorParam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IndicatorParam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IndicatorParam object.
        /// </summary>
        /// <param name="indicatorId">Initial value of the IndicatorId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static IndicatorParam CreateIndicatorParam(global::System.Int32 indicatorId, global::System.String name, global::System.Int32 id)
        {
            IndicatorParam indicatorParam = new IndicatorParam();
            indicatorParam.IndicatorId = indicatorId;
            indicatorParam.Name = name;
            indicatorParam.Id = id;
            return indicatorParam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IndicatorId
        {
            get
            {
                return _IndicatorId;
            }
            set
            {
                OnIndicatorIdChanging(value);
                ReportPropertyChanging("IndicatorId");
                _IndicatorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IndicatorId");
                OnIndicatorIdChanged();
            }
        }
        private global::System.Int32 _IndicatorId;
        partial void OnIndicatorIdChanging(global::System.Int32 value);
        partial void OnIndicatorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_IndicatorParam_Indicator", "Indicator")]
        public Indicator Indicator
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Indicator>("StockMonitorModel.FK_IndicatorParam_Indicator", "Indicator").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Indicator>("StockMonitorModel.FK_IndicatorParam_Indicator", "Indicator").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Indicator> IndicatorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Indicator>("StockMonitorModel.FK_IndicatorParam_Indicator", "Indicator");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Indicator>("StockMonitorModel.FK_IndicatorParam_Indicator", "Indicator", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_IndicatorParamValue_IndicatorParam", "IndicatorParamValue")]
        public EntityCollection<IndicatorParamValue> IndicatorParamValues
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndicatorParamValue>("StockMonitorModel.FK_IndicatorParamValue_IndicatorParam", "IndicatorParamValue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndicatorParamValue>("StockMonitorModel.FK_IndicatorParamValue_IndicatorParam", "IndicatorParamValue", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="IndicatorParamValue")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IndicatorParamValue : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IndicatorParamValue object.
        /// </summary>
        /// <param name="filterIndicatorId">Initial value of the FilterIndicatorId property.</param>
        /// <param name="paramId">Initial value of the ParamId property.</param>
        /// <param name="paramValue">Initial value of the ParamValue property.</param>
        public static IndicatorParamValue CreateIndicatorParamValue(global::System.Int32 filterIndicatorId, global::System.Int32 paramId, global::System.Double paramValue)
        {
            IndicatorParamValue indicatorParamValue = new IndicatorParamValue();
            indicatorParamValue.FilterIndicatorId = filterIndicatorId;
            indicatorParamValue.ParamId = paramId;
            indicatorParamValue.ParamValue = paramValue;
            return indicatorParamValue;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilterIndicatorId
        {
            get
            {
                return _FilterIndicatorId;
            }
            set
            {
                if (_FilterIndicatorId != value)
                {
                    OnFilterIndicatorIdChanging(value);
                    ReportPropertyChanging("FilterIndicatorId");
                    _FilterIndicatorId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FilterIndicatorId");
                    OnFilterIndicatorIdChanged();
                }
            }
        }
        private global::System.Int32 _FilterIndicatorId;
        partial void OnFilterIndicatorIdChanging(global::System.Int32 value);
        partial void OnFilterIndicatorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParamId
        {
            get
            {
                return _ParamId;
            }
            set
            {
                if (_ParamId != value)
                {
                    OnParamIdChanging(value);
                    ReportPropertyChanging("ParamId");
                    _ParamId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ParamId");
                    OnParamIdChanged();
                }
            }
        }
        private global::System.Int32 _ParamId;
        partial void OnParamIdChanging(global::System.Int32 value);
        partial void OnParamIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ParamValue
        {
            get
            {
                return _ParamValue;
            }
            set
            {
                OnParamValueChanging(value);
                ReportPropertyChanging("ParamValue");
                _ParamValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParamValue");
                OnParamValueChanged();
            }
        }
        private global::System.Double _ParamValue;
        partial void OnParamValueChanging(global::System.Double value);
        partial void OnParamValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_IndicatorParamValue_FilterIndicator", "FilterIndicator")]
        public FilterIndicator FilterIndicator
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilterIndicator>("StockMonitorModel.FK_IndicatorParamValue_FilterIndicator", "FilterIndicator").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilterIndicator>("StockMonitorModel.FK_IndicatorParamValue_FilterIndicator", "FilterIndicator").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FilterIndicator> FilterIndicatorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FilterIndicator>("StockMonitorModel.FK_IndicatorParamValue_FilterIndicator", "FilterIndicator");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FilterIndicator>("StockMonitorModel.FK_IndicatorParamValue_FilterIndicator", "FilterIndicator", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_IndicatorParamValue_IndicatorParam", "IndicatorParam")]
        public IndicatorParam IndicatorParam
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IndicatorParam>("StockMonitorModel.FK_IndicatorParamValue_IndicatorParam", "IndicatorParam").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IndicatorParam>("StockMonitorModel.FK_IndicatorParamValue_IndicatorParam", "IndicatorParam").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<IndicatorParam> IndicatorParamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<IndicatorParam>("StockMonitorModel.FK_IndicatorParamValue_IndicatorParam", "IndicatorParam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<IndicatorParam>("StockMonitorModel.FK_IndicatorParamValue_IndicatorParam", "IndicatorParam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Industry")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Industry : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Industry object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sectorId">Initial value of the SectorId property.</param>
        /// <param name="industryName">Initial value of the IndustryName property.</param>
        public static Industry CreateIndustry(global::System.Int32 id, global::System.Int32 sectorId, global::System.String industryName)
        {
            Industry industry = new Industry();
            industry.Id = id;
            industry.SectorId = sectorId;
            industry.IndustryName = industryName;
            return industry;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SectorId
        {
            get
            {
                return _SectorId;
            }
            set
            {
                OnSectorIdChanging(value);
                ReportPropertyChanging("SectorId");
                _SectorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SectorId");
                OnSectorIdChanged();
            }
        }
        private global::System.Int32 _SectorId;
        partial void OnSectorIdChanging(global::System.Int32 value);
        partial void OnSectorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IndustryName
        {
            get
            {
                return _IndustryName;
            }
            set
            {
                OnIndustryNameChanging(value);
                ReportPropertyChanging("IndustryName");
                _IndustryName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IndustryName");
                OnIndustryNameChanged();
            }
        }
        private global::System.String _IndustryName;
        partial void OnIndustryNameChanging(global::System.String value);
        partial void OnIndustryNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_Stock_Industry", "Stock")]
        public EntityCollection<Stock> Stocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Stock>("StockMonitorModel.FK_Stock_Industry", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Stock>("StockMonitorModel.FK_Stock_Industry", "Stock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Sector")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sector : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sector object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sectorName">Initial value of the SectorName property.</param>
        public static Sector CreateSector(global::System.Int32 id, global::System.String sectorName)
        {
            Sector sector = new Sector();
            sector.Id = id;
            sector.SectorName = sectorName;
            return sector;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SectorName
        {
            get
            {
                return _SectorName;
            }
            set
            {
                OnSectorNameChanging(value);
                ReportPropertyChanging("SectorName");
                _SectorName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SectorName");
                OnSectorNameChanged();
            }
        }
        private global::System.String _SectorName;
        partial void OnSectorNameChanging(global::System.String value);
        partial void OnSectorNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="StockMonitorModel", Name="Stock")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Stock : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Stock object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="ticker">Initial value of the Ticker property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Stock CreateStock(global::System.Int32 id, global::System.String ticker, global::System.String name)
        {
            Stock stock = new Stock();
            stock.Id = id;
            stock.Ticker = ticker;
            stock.Name = name;
            return stock;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Ticker
        {
            get
            {
                return _Ticker;
            }
            set
            {
                OnTickerChanging(value);
                ReportPropertyChanging("Ticker");
                _Ticker = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Ticker");
                OnTickerChanged();
            }
        }
        private global::System.String _Ticker;
        partial void OnTickerChanging(global::System.String value);
        partial void OnTickerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ExchangeId
        {
            get
            {
                return _ExchangeId;
            }
            set
            {
                OnExchangeIdChanging(value);
                ReportPropertyChanging("ExchangeId");
                _ExchangeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExchangeId");
                OnExchangeIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ExchangeId;
        partial void OnExchangeIdChanging(Nullable<global::System.Int32> value);
        partial void OnExchangeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private Nullable<global::System.Int32> _IndustryId;
        partial void OnIndustryIdChanging(Nullable<global::System.Int32> value);
        partial void OnIndustryIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_Stock_Exchange", "Exchange")]
        public Exchange Exchange
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Exchange>("StockMonitorModel.FK_Stock_Exchange", "Exchange").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Exchange>("StockMonitorModel.FK_Stock_Exchange", "Exchange").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Exchange> ExchangeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Exchange>("StockMonitorModel.FK_Stock_Exchange", "Exchange");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Exchange>("StockMonitorModel.FK_Stock_Exchange", "Exchange", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_HistData_Stock", "HistData")]
        public EntityCollection<HistData> HistDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HistData>("StockMonitorModel.FK_HistData_Stock", "HistData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HistData>("StockMonitorModel.FK_HistData_Stock", "HistData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("StockMonitorModel", "FK_Stock_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("StockMonitorModel.FK_Stock_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("StockMonitorModel.FK_Stock_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("StockMonitorModel.FK_Stock_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("StockMonitorModel.FK_Stock_Industry", "Industry", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
